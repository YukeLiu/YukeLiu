# 2) FIT INITIAL (IN-SAMPLE) MARKOV-SWITCHING MODEL
custom_start = [0.8, 0.1, 0.1, 0.1, 0.8, 0.1,
                -0.5, 0.0, 0.5,
                0.02, 0.005, 0.005]

def fit_ms(y, start_params):
    np.random.seed(88)

    mod = sm.tsa.MarkovRegression(
        endog=y,
        k_regimes=K,
        trend="c",
        switching_variance=True
    )
    
    res = mod.fit(
        em_iter    = 10,
        search_reps= 10,
        start_params = start_params,
        disp = False
    )


    pnames = res.model.param_names
    params = pd.Series(res.params, index=pnames)
    return res, params

# initial fit on in‐sample
res_in, params_prev = fit_ms(y_in, custom_start)

# extract transition‐matrix entries
def generate_P(param, K):
    P = np.zeros((K, K))
    for i in range(K):
        for j in range (K-1):
            P[i,j] = param[f"p[{i}->{j}]"]
        P[i, K-1] = 1-P[i, :K-1].sum()
    return P

P = generate_P(params_prev, 3)

# regime identification
mu = np.array([params_prev[f"const[{i}]"] for i in range (3)])
sig2 = np.array([params_prev[f"sigma2[{i}]"] for i in range (3)])

normal, high_vol_crash, low_vol_crash = regime_id(mu, sig2)

# get the filtered posterior at T_in
alpha_filt = res_in.filtered_marginal_probabilities[-1]  


# 3) EXPANDING-WINDOW OUT-OF-SAMPLE FORECAST
p_low_fore = np.zeros(T_out)
p_high_fore = np.zeros(T_out)
s_hat = np.zeros(T_out, dtype=int)
alphas_path = np.zeros((T_out, K))
mus_path = np.zeros((T_out, K))
sig2_path = np.zeros((T_out, K))

failed_dates = []
params_backup = params_prev.copy()
res_backup = res_in

for t in range(T_out):
    try: 
        alpha_pred = alpha_filt.dot(P)        
        p_low_fore[t] = alpha_pred[low_vol_crash]
        p_high_fore[t] = alpha_pred[high_vol_crash]
        s_hat[t] = int(alpha_pred.argmax())

        # now incorporate the realized y_out[t] into training set 
        # and re-fit to update params & filtered
        y_train = np.concatenate([y_in, y_out[:t+1]])
        res_t, params_t = fit_ms(
            y       = y_train,
            start_params= custom_start
            #start_params = params_prev.values  
        )
        # update for next iteration
        params_prev = params_t
        # rebuild P
        P = generate_P(params_t, 3)
    
        # update high-vol label if variances swapped
        mu = np.array([params_t[f"const[{i}]"] for i in range (K)])
        sig2 = np.array([params_t[f"sigma2[{i}]"] for i in range (K)])
        normal, high_vol_crash, low_vol_crash = regime_id(mu, sig2)

        # get new filtered posterior at end of expanded in-sample
        alpha_filt = res_t.filtered_marginal_probabilities[-1]
        p_high_vol = alpha_filt[high_vol_crash]
        p_low_vol = alpha_filt[low_vol_crash]

        mus_path[t, :] = mu
        sig2_path[t, :] = sig2
        alphas_path[t, :] = alpha_filt

        # backup
        params_prev = params_t
        res_backup = res_t
        params_backup = params_t.copy()
    except Exception as e:
        print(f"Skipping t = {t} due to error: {e}")
        failed_dates.append(dates_out[t])

        if t >=  2:
            params_prev = params_backup.copy()
            alpha_filt = alphas_path[t-1, :]
            mus_path[t, :] = mus_path[t-1, :]
            sig2_path[t, :] = sig2_path[t-1, :]
            alphas_path[t, :] = alpha_filt
        else:
            print(f"Unable to proceed at t + {t} due to no prior backup.")
            break
